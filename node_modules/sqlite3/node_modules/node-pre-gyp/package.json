{
  "name": "node-pre-gyp",
  "description": "Node.js native addon binary install tool",
  "version": "0.3.1",
  "keywords": [
    "native",
    "addon",
    "module",
    "c",
    "c++",
    "bindings",
    "binary"
  ],
  "author": {
    "name": "Dane Springmeyer",
    "email": "dane@mapbox.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/springmeyer/node-pre-gyp.git"
  },
  "preferGlobal": true,
  "bin": {
    "node-pre-gyp": "./bin/node-pre-gyp"
  },
  "main": "./lib/node-pre-gyp.js",
  "dependencies": {
    "nopt": "~2.1.2",
    "npmlog": "~0.0.6",
    "request": "2",
    "semver": "~2.1.0",
    "tar": "~0.1.19",
    "tar-pack": "~2.0.0",
    "mkdirp": "~0.3.5",
    "aws-sdk": "~2.0.0-rc6",
    "rc": "~0.3.2",
    "rimraf": "~2.2.5"
  },
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "./test.sh"
  },
  "readme": "# node-pre-gyp\n\n[![Build Status](https://secure.travis-ci.org/springmeyer/node-pre-gyp.png)](https://travis-ci.org/springmeyer/node-pre-gyp)\n\n`node-pre-gyp` is a Node.js native add-on install tool.\n\n## Does this replace npm or node-gyp?\n\nNo: it plays nicely with them.\n\n - You still publish your package to the npm repository\n - You still create a `binding.gyp` to compile your module with `node-gyp`\n\nWhat `node-pre-gyp` does is stand between `npm` and `node-gyp`.\n\n## Who uses node-pre-gyp?\n\n**Developers** of C++ modules can use `node-pre-gyp` to package and publish the binary `.node` before running `npm publish`.\n\n**Users** can then `npm install` your module from a binary and `node-pre-gyp` does the work to make this seamless.\n\n## Modules using `node-pre-gyp`:\n\n - [node-sqlite3](https://github.com/mapbox/node-sqlite3)\n - [node-mapnik](https://github.com/mapnik/node-mapnik)\n - [node-osmium](https://github.com/osmcode/node-osmium)\n - [node-osrm](https://github.com/DennisOSRM/node-OSRM)\n\nFor more examples see the [test apps](test/).\n\n## Usage\n\n\n**1) Add a custom `install` script to `package.json`**\n\n```js\n    \"scripts\": {\n        \"install\": \"node-pre-gyp install --fallback-to-build\",\n    }\n```\n\n\n**2) Add a `binary` property to `package.json`**\n\nIt must provide these properties:\n\n  - `module_name`: The name of your native node module.\n  - `module_path`: The location your native module is placed after a build. This should be an empty directory without other javascript files.\n  - `remote_uri`: A url to the remote location where you've published tarball binaries\n  - `template`: A string describing the tarball versioning scheme for your binaries\n\nAnd example from `node-sqlite3` looks like:\n\n```js\n    \"binary\": {\n        \"module_name\": \"node_sqlite3\",\n        \"module_path\": \"./lib/binding/\",\n        \"remote_uri\": \"http://node-sqlite3.s3.amazonaws.com\",\n        \"template\": \"{configuration}/{module_name}-v{version}-{node_abi}-{platform}-{arch}.tar.gz\"\n    },\n```\n\n**3) Build and package your app**\n\n```sh\nnode-pre-gyp build package\n```\n\n**4) Publish the tarball**\n\n```sh\nnode-pre-gyp publish\n```\n\nCurrently the `publish` command pushes your binary to S3. This requires:\n\n - You have created a bucket already.\n - The `remote-uri` points to an S3 http or https endpoint.\n - You have configured node-pre-gyp to read your S3 credentials (see [S3 hosting](#s3-hosting) for details).\n\nYou can also host your binaries elsewhere. To do this requires:\n\n - You manually publish the binary created by the `package` command.\n - The package is available as a tarball in the `build/stage/` directory.\n - You provide a remote location and point the `remote_uri` value to it.\n\n**5) Automating builds**\n\nNow you need to publish builds for all the platforms and node versions you wish to support. This is best automated. See [Travis Automation](#travis-automation) for how to auto-publish builds on OS X and Linux. On windows consider using a script [like this](https://github.com/mapbox/node-sqlite3/blob/master/scripts/build.bat) to quickly create and publish binaries.\n\n**6) You're done!**\n\nNow publish your package to the npm registry. Users will now be able to install your module from a binary. \n\nWhat will happen is this:\n\n1. `npm install <your package>` will pull from the npm registry\n2. npm will run the `install` script which will call out to `node-pre-gyp`\n3. `node-pre-gyp` will fetch the binary `.node` module and unpack in the right place\n4. Assuming that all worked, you are done\n\nIf a failure occurred and `--fallback-to-build` was used then `node-gyp rebuild` will be called to try to source compile the module.\n\n## S3 Hosting\n\nYou can host wherever you choose but S3 is cheap, `node-pre-gyp publish` expects it, and S3 can be integrated well with [travis.ci](http://travis-ci.org) to automate builds for OS X and Ubuntu. Here is an approach to do this:\n\nFirst, get setup locally and test the workflow:\n\n**1) Create an S3 bucket**\n\nAnd have your key and secret key ready for writing to the bucket.\n\n**2) Install node-pre-gyp**\n\nEither install it globally:\n\n    npm install node-pre-gyp -g\n\nOr put the local version on your PATH\n\n    export PATH=`pwd`/node_modules/.bin/:$PATH\n\n**3) Create an `~/.node_pre_gyprc`**\n\nOr pass options in any way supported by [RC](https://github.com/dominictarr/rc#standards)\n\nA `~/.node_pre_gyprc` looks like:\n\n```js\n{\n    \"accessKeyId\": \"xxx\",\n    \"secretAccessKey\": \"xxx\"\n}\n```\n\nAnother way is to use your environment:\n\n    export node_pre_gyp_accessKeyId=xxx\n    export node_pre_gyp_secretAccessKey=xxx\n\nYou may also need to specify the `region` if it is not explicit in the `remote_uri` value you use. The `bucket` can also be specified but it is optional because `node-pre-gyp` will detect it from the `remote_uri` value.\n\n**4) Package and publish your build**\n\n    node-pre-gyp package publish\n\nNote: if you hit an error like `Hostname/IP doesn't match certificate's altnames` it may mean that you need to provide the `region` option in your config.\n\n## Travis Automation\n\nTravis can push to S3 after a successful build and supports both:\n\n - Ubuntu Precise and OS X\n - Multiple Node.js versions\n\nThis enables you to cheaply auto-build and auto-publish binaries for (likely) the majority of your users.\n\n**1) Install the travis gem**\n\n    gem install travis\n\n**2) Create secure `global` variables**\n\nMake sure you run this command from within the directory of your module.\n\nUse `travis-encrypt` like:\n\n    travis encrypt node_pre_gyp_accessKeyId=${node_pre_gyp_accessKeyId}\n    travis encrypt node_pre_gyp_secretAccessKey=${node_pre_gyp_secretAccessKey}\n\nThen put those values in your `.travis.yml` like:\n\n```yaml\nenv:\n  global:\n    - secure: F+sEL/v56CzHqmCSSES4pEyC9NeQlkoR0Gs/ZuZxX1ytrj8SKtp3MKqBj7zhIclSdXBz4Ev966Da5ctmcTd410p0b240MV6BVOkLUtkjZJyErMBOkeb8n8yVfSoeMx8RiIhBmIvEn+rlQq+bSFis61/JkE9rxsjkGRZi14hHr4M=\n    - secure: o2nkUQIiABD139XS6L8pxq3XO5gch27hvm/gOdV+dzNKc/s2KomVPWcOyXNxtJGhtecAkABzaW8KHDDi5QL1kNEFx6BxFVMLO8rjFPsMVaBG9Ks6JiDQkkmrGNcnVdxI/6EKTLHTH5WLsz8+J7caDBzvKbEfTux5EamEhxIWgrI=\n```\n\nMore details on travis encryption at http://about.travis-ci.org/docs/user/encryption-keys/.\n\n**3) Hook up publishing**\n\nJust put `node-pre-gyp package publish` in your `.travis.yml` after `npm install`.\n\nIf you want binaries for OS X change your `.travis.yml` to use:\n\n```yml\nlanguage: objective-c\n```\n\nPerhaps keep that change in a different git branch and sync that when you want binaries published.\n\nNote: using `language: objective-c` instead of `language: nodejs` looses node.js specific travis sugar like a matrix for multiple node.js versions.\n\nBut you can replicate the lost behavior by replacing:\n\n```yml\nnode_js:\n  - \"0.8\"\n  - \"0.10\"\n```\n\nWith:\n\n```yml\nenv:\n  matrix:\n    - export NODE_VERSION=\"0.8\"\n    - export NODE_VERSION=\"0.10\"\n\nbefore_install:\n - git clone https://github.com/creationix/nvm.git ./.nvm\n - source ./.nvm/nvm.sh\n - nvm install $NODE_VERSION\n - nvm use $NODE_VERSION\n```\n\n**4) Publish when you want**\n\nYou might wish to publish binaries only on a specific commit. To do this you could borrow from the [travis.ci idea of commit keywords](http://about.travis-ci.org/docs/user/how-to-skip-a-build/) and add special handling for commit messages with `[publish]`:\n\n    COMMIT_MESSAGE=$(git show -s --format=%B $TRAVIS_COMMIT | tr -d '\\n')\n    if test \"${COMMIT_MESSAGE#*[publish]}\" != \"$COMMIT_MESSAGE\"; then node-pre-gyp publish; fi;\n\nOr you could automatically detect if the git branch is a tag:\n\n    if [[ $TRAVIS_BRANCH == `git describe --tags --always HEAD` ]] ; then node-pre-gyp publish; fi\n\nRemember this publishing is not the same as `npm publish`. We're just talking about the\nbinary module here and not your entire npm package. To automate the publishing of your entire package to npm on travis see http://about.travis-ci.org/docs/user/deployment/npm/\n\n### Commands\n\nView all possible commands:\n\n    node-pre-gyp --help\n\n#### Unpublish binaries\n\n    node-pre-gyp unpublish\n\n#### Clean install and build artifacts\n\n    node-pre-gyp clean\n\n#### Clean and install\n\n    node-pre-gyp reinstall # runs \"clean\" and \"install\"\n\n### Options\n\nOptions include:\n\n - `--build-from-source`\n - `--fallback-to-build`\n\nBoth of these options can be passed alone or they can provide values. So, in addition to being able to pass `--build-from-source` you can also pass `--build-from-source=myapp` where `myapp` is the name of your module.\n\nFor example: `npm install --build-from-source=myapp`. This is useful if:\n\n - `myapp` is referenced in the package.json of a larger app and therefore `myapp` is being installed as a dependent with `npm install`.\n - The larger app also depends on other modules installed with `node-pre-gyp`\n - You only want to trigger a source compile for `myapp` and the other modules.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/springmeyer/node-pre-gyp/issues"
  },
  "homepage": "https://github.com/springmeyer/node-pre-gyp",
  "_id": "node-pre-gyp@0.3.1",
  "dist": {
    "shasum": "81bbcd688f44767fa770a2ade6cd2c70aa9ee4f9"
  },
  "_from": "node-pre-gyp@~0.3.0",
  "_resolved": "https://registry.npmjs.org/node-pre-gyp/-/node-pre-gyp-0.3.1.tgz"
}
